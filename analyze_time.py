import pandas as pd
import psycopg2
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
import numpy as np

DB_CONFIG = { 'user': 'postgres', 'password': 'Quan@', 'host': 'localhost', 'port': '5432', 'database': 'flood_alert_db' }

# ===== S·ª¨A 1: H√ÄM T·∫†O 7 ƒê·∫∂C TR∆ØNG =====
# (Copy y h·ªát file analyze.py)
def create_features_from_db(df):
    print("ƒêang t·∫°o 7 ƒë·∫∑c tr∆∞ng th√¥ng minh (Rain ON/OFF)...")
    df = df.sort_values(by='created_at')
    df['time_diff'] = df['created_at'].diff().dt.total_seconds().fillna(0)
    df['b_rate_of_change'] = df['mucnuocb'].diff() / df['time_diff']
    df['flow_rate_of_change'] = df['luuluong'].diff() / df['time_diff']
    df['ab_diff'] = df['mucnuocb'] - df['mucnuoca']
    df['is_raining_now'] = df['time_until_a_danger'].apply(lambda x: 1 if pd.notnull(x) and x > 0 else 0)
    df = df.replace([np.inf, -np.inf], 0)
    df = df.fillna(0)
    return df
# =====================================

print("ƒêang k·∫øt n·ªëi t·ªõi PostgreSQL...")
try:
    conn = psycopg2.connect(**DB_CONFIG)
    query = "SELECT * FROM public.sensor_data;" # L·∫•y h·∫øt CSDL
    df = pd.read_sql_query(query, conn)
    conn.close()

    if len(df) < 50: print(f"‚ùå L·ªói: C·∫ßn √≠t nh·∫•t 50 h√†ng. M·ªõi c√≥ {len(df)} h√†ng.")
    else:
        print(f"‚úÖ L·∫•y d·ªØ li·ªáu th√†nh c√¥ng! B·∫Øt ƒë·∫ßu h·ªçc tr√™n {len(df)} h√†ng.")

        df_features = create_features_from_db(df)

        # ===== S·ª¨A 2: ƒê·∫¶U V√ÄO L√Ä 7 ƒê·∫∂C TR∆ØNG =====
        features = [
            'mucnuoca',
            'mucnuocb',
            'luuluong',
            'is_raining_now',        # <-- TH√äM M·ªöI
            'b_rate_of_change',
            'flow_rate_of_change',
            'ab_diff'
        ]
        X = df_features[features]
        target = 'time_until_a_danger'
        y = df_features[target].fillna(0) # Target v·∫´n l√† countdown

        print("B·∫Øt ƒë·∫ßu hu·∫•n luy·ªán m√¥ h√¨nh ƒê·∫æM NG∆Ø·ª¢C (7-features)...")
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        model = RandomForestRegressor(n_estimators=200, max_depth=10, random_state=42)
        model.fit(X_train, y_train)
        print("‚úÖ Hu·∫•n luy·ªán ho√†n t·∫•t!")
        predictions = model.predict(X_test)
        rmse = np.sqrt(mean_squared_error(y_test, predictions))
        print(f"üìä ƒê·ªô ch√≠nh x√°c (RMSE): {rmse:.2f} gi√¢y")
        joblib.dump(model, 'time_model.pkl')
        print("‚úÖ ƒê√£ l∆∞u m√¥ h√¨nh ƒë·∫øm ng∆∞·ª£c v√†o file 'time_model.pkl'.")
except Exception as e: print(f"‚ùå L·ªói: {e}")